# Generated by Django 4.2.4 on 2023-10-23 10:46

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import users.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        error_messages={
                            "unique": "Пользователь с таким e-mail уже существует."
                        },
                        max_length=50,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(5)],
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[django.core.validators.MinLengthValidator(2)],
                        verbose_name="Имя",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[django.core.validators.MinLengthValidator(2)],
                        verbose_name="Фамилия",
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[django.core.validators.MinLengthValidator(2)],
                        verbose_name="Отчество",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        blank=True,
                        help_text="Введите пароль",
                        max_length=125,
                        null=True,
                        validators=[django.core.validators.MinLengthValidator(8)],
                        verbose_name="Пароль",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("0", "Client"),
                            ("1", "Trainer"),
                            ("2", "Nutritionist"),
                        ],
                        default="1",
                        max_length=2,
                        verbose_name="Роль пользователя",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.MinLengthValidator(9),
                            django.core.validators.RegexValidator(
                                message="Допускаются цифры, (), +- и пробел",
                                regex="^[-\\d\\+\\)\\( ]+\\Z",
                            ),
                        ],
                        verbose_name="Номер телефона",
                    ),
                ),
                (
                    "dob",
                    models.DateField(
                        blank=True, null=True, verbose_name="Дата рождения"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("0", "Absent"), ("1", "Female"), ("2", "Male")],
                        default="0",
                        max_length=1,
                        verbose_name="Гендер пользователя",
                    ),
                ),
                (
                    "capture",
                    models.ImageField(
                        blank=True, null=True, upload_to="", verbose_name="Аватар"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="Staff status"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(default=False, verbose_name="Admin status"),
                ),
                ("is_specialist", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(blank=True, default=True, null=True)),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
            },
            managers=[
                ("objects", users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Institution",
            fields=[
                (
                    "name",
                    models.CharField(
                        max_length=128,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Название учебного заведения",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
            ],
            options={
                "verbose_name": "Учебное заведение",
                "verbose_name_plural": "Учебные заведения",
            },
        ),
        migrations.CreateModel(
            name="Specialists",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "experience",
                    models.TextField(
                        blank=True, null=True, verbose_name="Опыт работы специалиста"
                    ),
                ),
                (
                    "contacts",
                    models.TextField(
                        blank=True, null=True, verbose_name="Контакты специалиста"
                    ),
                ),
                (
                    "about",
                    models.TextField(
                        blank=True, null=True, verbose_name="О специалисте"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default="True", verbose_name="Флаг активный специалист"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="specialist",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Специалист",
                "verbose_name_plural": "Специалисты",
            },
        ),
        migrations.CreateModel(
            name="SpecialistClient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "diseases",
                    models.TextField(blank=True, null=True, verbose_name="Заболевания"),
                ),
                (
                    "exp_diets",
                    models.TextField(blank=True, null=True, verbose_name="Опыт диет"),
                ),
                (
                    "exp_trainings",
                    models.TextField(
                        blank=True, null=True, verbose_name="Опыт тренировок"
                    ),
                ),
                (
                    "bad_habits",
                    models.TextField(blank=True, null=True, verbose_name="Привычки"),
                ),
                (
                    "food_preferences",
                    models.TextField(
                        blank=True, null=True, verbose_name="Предпочтения в еде"
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, null=True, verbose_name="Заметки"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "specialist",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="specialist_client_spec",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="specialist_client_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Специалист-Клиент",
                "verbose_name_plural": "Специалисты-Клиенты",
            },
        ),
        migrations.CreateModel(
            name="Params",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "weight",
                    models.FloatField(blank=True, null=True, verbose_name="Вес"),
                ),
                (
                    "height",
                    models.IntegerField(blank=True, null=True, verbose_name="Рост"),
                ),
                (
                    "waist_size",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Размер талии"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="params",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Параметр",
                "verbose_name_plural": "Параметры",
            },
        ),
        migrations.CreateModel(
            name="Education",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "graduate",
                    models.TextField(
                        blank=True, null=True, verbose_name="Текст диплома"
                    ),
                ),
                (
                    "completion_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Дата окончания"
                    ),
                ),
                (
                    "number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Номер диплома",
                    ),
                ),
                (
                    "capture",
                    models.ImageField(
                        blank=True, null=True, upload_to="", verbose_name="Скан диплома"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="education_institution",
                        to="users.institution",
                        verbose_name="Учебное заведение",
                    ),
                ),
            ],
            options={
                "verbose_name": "Образование",
                "verbose_name_plural": "Образования",
            },
        ),
    ]
