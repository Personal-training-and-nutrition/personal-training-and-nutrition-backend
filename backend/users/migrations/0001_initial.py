# Generated by Django 4.2.4 on 2023-09-11 18:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=128, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=128, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Отчество')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким e-mail уже существует.'}, max_length=128, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=8, null=True, verbose_name='Номер телефона')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('capture', models.ImageField(null=True, upload_to='')),
                ('about', models.TextField(null=True)),
                ('is_specialist', models.BooleanField(blank=True, default=False)),
                ('is_active', models.BooleanField(blank=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graduate', models.TextField(verbose_name='Текст диплома')),
                ('completion_date', models.DateField(verbose_name='Дата окончания')),
                ('number', models.CharField(max_length=64, verbose_name='Номер диплома')),
                ('capture', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Скан диплома')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Образование',
                'verbose_name_plural': 'Образования',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, primary_key=True, serialize=False, verbose_name='Пол пользователя')),
            ],
            options={
                'verbose_name': 'Пол',
                'verbose_name_plural': 'Полы',
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('name', models.CharField(max_length=256, primary_key=True, serialize=False, verbose_name='Название учебного заведения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Учебное заведение',
                'verbose_name_plural': 'Учебные заведения',
            },
        ),
        migrations.CreateModel(
            name='Params',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(verbose_name='Вес')),
                ('height', models.IntegerField(verbose_name='Рост')),
                ('waist_size', models.IntegerField(verbose_name='Размер талии')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Параметр',
                'verbose_name_plural': 'Параметры',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('trainer', 'Тренер'), ('nutritionist', 'Диетолог')], max_length=64, verbose_name='Роль пользователя')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='SpecialistClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Специалист-Клиент',
                'verbose_name_plural': 'Специалисты-Клиенты',
            },
        ),
        migrations.CreateModel(
            name='Specialists',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experience', models.TextField(verbose_name='Опыт работы специалиста')),
                ('contacts', models.TextField(verbose_name='Контакты специалиста')),
                ('about', models.TextField(blank=True, null=True, verbose_name='О специалисте')),
                ('is_active', models.BooleanField(verbose_name='Флаг активный специалист')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('education', models.ManyToManyField(related_name='specialists_educations', to='users.education')),
                ('user', models.ManyToManyField(blank=True, related_name='specialist_users', through='users.SpecialistClient', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Специалист',
                'verbose_name_plural': 'Специалисты',
            },
        ),
        migrations.AddField(
            model_name='specialistclient',
            name='specialist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specialist_client_spec', to='users.specialists'),
        ),
        migrations.AddField(
            model_name='specialistclient',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specialist_client_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='education',
            name='institution',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='education_institution', to='users.institution', verbose_name='Учебное заведение'),
        ),
        migrations.AddField(
            model_name='user',
            name='gender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_gender', to='users.gender'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='params',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_params', to='users.params'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_role', to='users.role'),
        ),
        migrations.AddField(
            model_name='user',
            name='specialist',
            field=models.ManyToManyField(blank=True, related_name='user_specialists', through='users.SpecialistClient', to='users.specialists'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
